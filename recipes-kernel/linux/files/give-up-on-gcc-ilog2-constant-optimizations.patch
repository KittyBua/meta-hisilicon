--- a/include/linux/log2.h	2016-11-26 09:55:04.000000000 +0100
+++ b/include/linux/log2.h	2019-01-12 10:50:00.238731380 +0100
@@ -16,12 +16,6 @@
 #include <linux/bitops.h>
 
 /*
- * deal with unrepresentable constant logarithms
- */
-extern __attribute__((const, noreturn))
-int ____ilog2_NaN(void);
-
-/*
  * non-constant log of base 2 calculators
  * - the arch may override these in asm/bitops.h if they can be implemented
  *   more efficiently than using fls() and fls64()
@@ -85,7 +79,7 @@
 #define ilog2(n)				\
 (						\
 	__builtin_constant_p(n) ? (		\
-		(n) < 1 ? ____ilog2_NaN() :	\
+		(n) < 2 ? 0 :			\
 		(n) & (1ULL << 63) ? 63 :	\
 		(n) & (1ULL << 62) ? 62 :	\
 		(n) & (1ULL << 61) ? 61 :	\
@@ -148,10 +142,7 @@
 		(n) & (1ULL <<  4) ?  4 :	\
 		(n) & (1ULL <<  3) ?  3 :	\
 		(n) & (1ULL <<  2) ?  2 :	\
-		(n) & (1ULL <<  1) ?  1 :	\
-		(n) & (1ULL <<  0) ?  0 :	\
-		____ilog2_NaN()			\
-				   ) :		\
+		1 ) :				\
 	(sizeof(n) <= 4) ?			\
 	__ilog2_u32(n) :			\
 	__ilog2_u64(n)				\

--- a/tools/include/linux/log2.h        2016-11-26 09:55:04.000000000 +0100
+++ b/tools/include/linux/log2.h        2019-01-12 10:50:15.143103433 +0100
@@ -13,12 +13,6 @@
 #define _TOOLS_LINUX_LOG2_H

 /*
- * deal with unrepresentable constant logarithms
- */
-extern __attribute__((const, noreturn))
-int ____ilog2_NaN(void);
-
-/*
  * non-constant log of base 2 calculators
  * - the arch may override these in asm/bitops.h if they can be implemented
  *   more efficiently than using fls() and fls64()

@@ -78,7 +72,7 @@
 #define ilog2(n)                               \
 (                                              \
        __builtin_constant_p(n) ? (             \
-               (n) < 1 ? ____ilog2_NaN() :     \
+               (n) < 2 ? 0 :                   \
                (n) & (1ULL << 63) ? 63 :	\
                (n) & (1ULL << 62) ? 62 :	\
                (n) & (1ULL << 61) ? 61 :	\
@@ -141,10 +135,7 @@
                (n) & (1ULL <<  4) ?  4 :	\
                (n) & (1ULL <<  3) ?  3 :	\
                (n) & (1ULL <<  2) ?  2 :	\
-               (n) & (1ULL <<  1) ?  1 :	\
-               (n) & (1ULL <<  0) ?  0 :	\
-               ____ilog2_NaN()                 \
-                                  ) :          \
+               1 ) :				\
        (sizeof(n) <= 4) ?                      \
        __ilog2_u32(n) :                        \
        __ilog2_u64(n)                          \

